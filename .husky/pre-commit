#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Colors for better visibility
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to display messages
info() {
  printf "${BLUE}❯ ${NC}%s\n" "$1"
}

success() {
  printf "${GREEN}✓ ${NC}%s\n" "$1"
}

error() {
  printf "${RED}✗ ${NC}%s\n" "$1"
}

warning() {
  printf "${YELLOW}⚠ ${NC}%s\n" "$1"
}

# Run pre-commit checks
info "Running pre-commit quality checks..."
info "----------------------------------"

# Type checking
info "1. Running TypeScript type checking..."
npm run check-types --silent
if [ $? -ne 0 ]; then
  error "Type checking failed!"
  warning "Run 'npm run check-types' to see detailed errors"
  exit 1
fi
success "Type checking passed!"

# Formatting check
info "\n2. Checking code formatting..."
npm run check-format --silent
if [ $? -ne 0 ]; then
  error "Code formatting issues found!"
  warning "Run 'npm run format' to automatically fix formatting"
  exit 1
fi
success "Formatting check passed!"

# Linting
info "\n3. Running linter..."
npm run check-lint --silent
if [ $? -ne 0 ]; then
  error "Linting errors detected!"
  warning "Run 'npm run lint' to view and fix linting issues"
  exit 1
fi
success "Linting passed!"

# Auto-format
info "\n4. Applying code formatting..."
npm run format --silent
if [ $? -ne 0 ]; then
  error "Auto-formatting failed!"
  warning "Try running 'npm run format' manually"
  exit 1
fi
success "Code formatted successfully!"

# Final success message
printf "\n${GREEN}✔ ✔ ✔ ${NC}All pre-commit checks passed! ${GREEN}✔ ✔ ✔${NC}\n\n"
exit 0